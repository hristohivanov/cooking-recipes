version: '3'

services:
  server:
    build: .
    image: hristoivanov23/php-wrapped:8.2-symfony-pgsql
    command: sh -c "symfony serve"
    ports:
      - "$DOCKER_SERVER_PORT:8000"
    env_file:
      - ./.env
    environment:
      - CONF_PHP_INI_MEMORY_LIMIT=-1
      - XDEBUG_CONFIG=remote_host=host.docker.internal
      - PHP_IDE_CONFIG=serverName=localhost
      - XDEBUG_MODE=${DOCKER_XDEBUG_MODE:-off}
    volumes:
      - .:/var/www/html
      - node_modules:/var/www/html/node_modules/
      - public_build:/var/www/html/public/build/
      #- /var/www/html/vendor/
      - /var/www/html/var/log/
      - /var/www/html/var/cache/
      - ./dockerfiles/php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###
  encore:
    image: node:20
    working_dir: /app
    command: sh -c "npm install && npm run watch"
    volumes:
      - .:/app
      - node_modules:/app/node_modules/
      - public_build:/app/public/build/
    env_file:
      - ./.env
    environment:
      - NODE_OPTIONS=--max_old_space_size=4096
    depends_on:
      - "server"
volumes:
  reserved:
  node_modules:
  public_build:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
